     1                                  extern malloc
     2                                  
     3                                  struc _node
     4 00000000 ????????????????            _n_data:  resq 1  ; the address of data of the node
     5 00000008 ????????????????            _n_next:  resq 1  ; the address of the next node
     6                                  endstruc
     7                                  
     8                                  struc _linkedList
     9 00000000 ????????????????            _l_head:     resq 1  ; the address of the head node
    10 00000008 ????????????????            _l_tail:     resq 1  ; the address of the tail node
    11 00000010 ????????????????            _l_current:  resq 1  ; the address of the current node
    12                                  endstruc
    13                                  
    14                                  section .text
    15                                  
    16                                  ;
    17                                  ;
    18                                  ; * Args
    19                                  ;   * rdi: the address of a list
    20                                  global initialize_list
    21                                  initialize_list:
    22                                      section .text
    23 00000000 55                              push rbp
    24 00000001 4889E5                          mov  rbp, rsp
    25                                  
    26 00000004 BF00000000                      mov  rdi, 0          ; Set _l_head to NULL
    27 00000009 4883C708                        add  rdi, _l_tail
    28 0000000D BF00000000                      mov  rdi, 0          ; Set _l_tail to NULL
    29 00000012 4883C710                        add  rdi, _l_current
    30 00000016 BF00000000                      mov  rdi, 0          ; Set _l_current to NULL
    31                                  
    32 0000001B C9                              leave
    33 0000001C C3                              ret
    34                                  
    35                                  ;
    36                                  ;
    37                                  ; * Args
    38                                  ;   * rdi: the address of a list
    39                                  ;   * rsi: the address of data
    40                                  global add_head
    41                                  add_head:
    42                                      section .text
    43 0000001D 55                              push rbp
    44 0000001E 4889E5                          mov  rbp, rsp
    45                                  
    46 00000021 4989FC                          mov r12, rdi  ; the address of a list
    47 00000024 4989F5                          mov r13, rsi  ; the address of data
    48                                  
    49                                          ; Allocate memory for new node
    50 00000027 4831FF                          xor  rdi, rdi
    51 0000002A BF00000000                      mov  rdi, _n_data
    52 0000002F 4883C708                        add  rdi, _n_next
    53 00000033 4883C708                        add  rdi, 8
    54 00000037 E8(00000000)                    call malloc
    55 0000003C 4989C6                          mov  r14, rax         ; the address of new node
    56                                  
    57                                          ; Set the data of new node to
    58                                          ; the address of data passed as an argument.
    59 0000003F 4C8928                          mov  [rax], r13
    60                                  
    61                                          ; Check the head of the list
    62 00000042 498B3C24                        mov rdi, [r12]
    63 00000046 4883FF00                        cmp rdi, 0x0000000000000000
    64 0000004A 7519                            jnz .yes_head
    65                                  
    66                                          ; If there is no head in the list, set the head to new node
    67                                          ; and set the next of new node to NULL
    68                                          .no_head:
    69 0000004C 4C89E7                          mov  rdi, r12
    70 0000004F 4883C708                        add  rdi, _l_tail
    71 00000053 4C8937                          mov  [rdi], r14
    72                                  
    73 00000056 4C89F7                          mov  rdi, r14
    74 00000059 4883C708                        add  rdi, _n_next
    75 0000005D 4831F6                          xor  rsi, rsi
    76 00000060 488937                          mov  [rdi], rsi 
    77                                  
    78 00000063 EB0E                            jmp .last_step
    79                                  
    80                                          ; If there is a head in the list,
    81                                          ; set the next of new node to the head of the list.
    82                                          .yes_head:
    83 00000065 4C89F7                          mov  rdi, r14
    84 00000068 4883C708                        add  rdi, _n_next
    85 0000006C 498B3424                        mov  rsi, [r12]
    86 00000070 488937                          mov  [rdi], rsi
    87                                  
    88                                          ; Set the head of the list
    89                                          .last_step:
    90 00000073 4D893424                        mov [r12], r14
    91                                  
    92 00000077 C9                              leave
    93 00000078 C3                              ret
    94                                  
