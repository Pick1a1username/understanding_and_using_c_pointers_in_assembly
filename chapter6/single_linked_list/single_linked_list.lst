     1                                  extern malloc
     2                                  extern free
     3                                  
     4                                  struc _node
     5 00000000 ????????????????            _n_data:  resq 1  ; the address of data of the node
     6 00000008 ????????????????            _n_next:  resq 1  ; the address of the next node
     7                                  endstruc
     8                                  
     9                                  struc _linkedList
    10 00000000 ????????????????            _l_head:     resq 1  ; the address of the head node
    11 00000008 ????????????????            _l_tail:     resq 1  ; the address of the tail node
    12 00000010 ????????????????            _l_current:  resq 1  ; the address of the current node
    13                                  endstruc
    14                                  
    15                                  section .text
    16                                  
    17                                  ;
    18                                  ;
    19                                  ; * Args
    20                                  ;   * rdi: the address of a list
    21                                  global initialize_list
    22                                  initialize_list:
    23                                      section .text
    24 00000000 55                              push rbp
    25 00000001 4889E5                          mov  rbp, rsp
    26                                  
    27 00000004 BF00000000                      mov  rdi, 0          ; Set _l_head to NULL
    28 00000009 4883C708                        add  rdi, _l_tail
    29 0000000D BF00000000                      mov  rdi, 0          ; Set _l_tail to NULL
    30 00000012 4883C710                        add  rdi, _l_current
    31 00000016 BF00000000                      mov  rdi, 0          ; Set _l_current to NULL
    32                                  
    33 0000001B C9                              leave
    34 0000001C C3                              ret
    35                                  
    36                                  ;
    37                                  ;
    38                                  ; * Args
    39                                  ;   * rdi: the address of a list
    40                                  ;   * rsi: the address of data
    41                                  global add_head
    42                                  add_head:
    43                                      section .text
    44 0000001D 55                              push rbp
    45 0000001E 4889E5                          mov  rbp, rsp
    46                                  
    47 00000021 4989FC                          mov r12, rdi  ; the address of a list
    48 00000024 4989F5                          mov r13, rsi  ; the address of data
    49                                  
    50                                          ; Allocate memory for new node
    51 00000027 4831FF                          xor  rdi, rdi
    52 0000002A BF00000000                      mov  rdi, _n_data
    53 0000002F 4883C708                        add  rdi, _n_next
    54 00000033 4883C708                        add  rdi, 8
    55 00000037 E8(00000000)                    call malloc
    56 0000003C 4989C6                          mov  r14, rax         ; the address of new node
    57                                  
    58                                          ; Set the data of new node to
    59                                          ; the address of data passed as an argument.
    60 0000003F 4C8928                          mov  [rax], r13
    61                                  
    62                                          ; Check the head of the list
    63 00000042 498B3C24                        mov rdi, [r12]
    64 00000046 4883FF00                        cmp rdi, 0x0000000000000000
    65 0000004A 7519                            jnz .yes_head
    66                                  
    67                                          ; If there is no head in the list, set the head to new node
    68                                          ; and set the next of new node to NULL
    69                                          .no_head:
    70 0000004C 4C89E7                          mov  rdi, r12
    71 0000004F 4883C708                        add  rdi, _l_tail
    72 00000053 4C8937                          mov  [rdi], r14
    73                                  
    74 00000056 4C89F7                          mov  rdi, r14
    75 00000059 4883C708                        add  rdi, _n_next
    76 0000005D 4831F6                          xor  rsi, rsi
    77 00000060 488937                          mov  [rdi], rsi 
    78                                  
    79 00000063 EB0E                            jmp .last_step
    80                                  
    81                                          ; If there is a head in the list,
    82                                          ; set the next of new node to the head of the list.
    83                                          .yes_head:
    84 00000065 4C89F7                          mov  rdi, r14
    85 00000068 4883C708                        add  rdi, _n_next
    86 0000006C 498B3424                        mov  rsi, [r12]
    87 00000070 488937                          mov  [rdi], rsi
    88                                  
    89                                          ; Set the head of the list
    90                                          .last_step:
    91 00000073 4D893424                        mov [r12], r14
    92                                  
    93 00000077 C9                              leave
    94 00000078 C3                              ret
    95                                  
    96                                  ;
    97                                  ; * Args
    98                                  ;   * rdi: the address of a list
    99                                  ;   * rsi: the address of data
   100                                  global add_tail
   101                                  add_tail:
   102                                      section .text
   103 00000079 55                              push rbp
   104 0000007A 4889E5                          mov  rbp, rsp
   105                                  
   106 0000007D 4989FC                          mov r12, rdi  ; the address of a list
   107 00000080 4989F5                          mov r13, rsi  ; the address of data
   108                                  
   109                                          ; Allocate memory for new node
   110 00000083 4831FF                          xor  rdi, rdi
   111 00000086 BF00000000                      mov  rdi, _n_data
   112 0000008B 4883C708                        add  rdi, _n_next
   113 0000008F 4883C708                        add  rdi, 8
   114 00000093 E8(00000000)                    call malloc
   115 00000098 4989C6                          mov  r14, rax         ; the address of new node
   116                                  
   117                                          ; Set the data of new node to
   118                                          ; the address of data passed as an argument.
   119 0000009B 4C8928                          mov [rax], r13
   120                                  
   121                                          ; Set the next of new node to NULL.
   122 0000009E 4883C008                        add rax, _n_next
   123 000000A2 4831F6                          xor rsi, rsi
   124 000000A5 488930                          mov [rax], rsi
   125                                  
   126                                          ; Check the head of the list
   127 000000A8 498B3C24                        mov rdi, [r12]
   128 000000AC 4883FF00                        cmp rdi, 0x0000000000000000
   129 000000B0 7508                            jnz .yes_head
   130                                  
   131                                          ; If there is no head in the list, set the head to new node.
   132                                          .no_head:
   133 000000B2 4C89E7                          mov  rdi, r12
   134 000000B5 4C8937                          mov  [rdi], r14
   135                                          
   136 000000B8 EB11                            jmp .last_step
   137                                  
   138                                          ; If there is a head in the list,
   139                                          ; set the old tail's next to new node.
   140                                          .yes_head:
   141 000000BA 4C89E7                          mov rdi, r12
   142 000000BD 4883C708                        add rdi, _l_tail
   143 000000C1 488B3F                          mov rdi, [rdi]
   144 000000C4 4883C708                        add rdi, _n_next
   145 000000C8 4C8937                          mov [rdi], r14
   146                                  
   147                                          ; Set the tail of the list to new node
   148                                          .last_step:
   149 000000CB 4C89E7                          mov rdi, r12
   150 000000CE 4883C708                        add rdi, _l_tail
   151 000000D2 4C8937                          mov [rdi], r14
   152                                  
   153 000000D5 C9                              leave
   154 000000D6 C3                              ret
   155                                  
   156                                  ;
   157                                  ; * Args
   158                                  ;   * rdi: the address of a list
   159                                  ;   * rsi: the pointer to the compare function
   160                                  ;   * rdx: the address of data
   161                                  ; * Return
   162                                  ;   * The address of the node, if it is found
   163                                  ;   * NULL, if it is not found
   164                                  global get_node
   165                                  get_node:
   166                                      section .text
   167 000000D7 55                              push rbp
   168 000000D8 4889E5                          mov  rbp, rsp
   169                                          
   170 000000DB 4989FC                          mov r12, rdi  ; the address of a list
   171 000000DE 4989F5                          mov r13, rsi  ; the pointer to the compare function
   172 000000E1 4989D6                          mov r14, rdx  ; the address of data to get
   173                                  
   174 000000E4 4C8B3F                          mov r15, [rdi]  ; the head node of the list
   175                                                          ; This will be set to the next node in every loop
   176                                  
   177                                          .compare_loop:
   178 000000E7 498B3F                          mov  rdi, [r15]
   179 000000EA 4C89F6                          mov  rsi, r14
   180 000000ED 41FFD5                          call r13
   181 000000F0 4885C0                          test rax, rax
   182 000000F3 740E                            jz   .return_node
   183                                  
   184 000000F5 4983C708                        add  r15, _n_next
   185 000000F9 4D8B3F                          mov  r15, [r15]
   186 000000FC 4D85FF                          test r15, r15
   187 000000FF 75E6                            jnz  .compare_loop  ; loop if there is the next node.
   188 00000101 EB05                            jmp  .return_null
   189                                  
   190                                          .return_node:
   191 00000103 4C89F8                          mov rax, r15
   192 00000106 C9                              leave
   193 00000107 C3                              ret
   194                                  
   195                                          .return_null:
   196 00000108 4831C0                          xor rax, rax
   197 0000010B C9                              leave
   198 0000010C C3                              ret
   199                                  
   200                                  ;
   201                                  ; * Args
   202                                  ;   * rdi: the address of a list
   203                                  ;   * rsi: the address of a node
   204                                  global delete
   205                                  delete:
   206                                      section .text
   207 0000010D 55                              push rbp
   208 0000010E 4889E5                          mov  rbp, rsp
   209                                  
   210 00000111 4989FC                          mov r12, rdi  ; the address of the list
   211 00000114 4989F5                          mov r13, rsi  ; the address of the node
   212                                  
   213 00000117 498B3C24                        mov rdi, [r12]  ; the head node of the list
   214 0000011B 4C39EF                          cmp rdi, r13
   215 0000011E 7402                            jz  .node_eq_list_head
   216 00000120 EB38                            jmp .node_neq_list_head
   217                                  
   218                                          .node_eq_list_head:
   219 00000122 4883C708                        add  rdi, _n_next  ; the next node of the head node
   220 00000126 4885FF                          test rdi, rdi      ;
   221 00000129 7515                            jnz  .change_list_head
   222                                  
   223                                          ; Clear the head and the tail of the list.
   224 0000012B 498B3C24                        mov rdi, [r12]
   225 0000012F BE00000000                      mov rsi, 0
   226 00000134 488937                          mov [rdi], rsi
   227 00000137 4883C708                        add rdi, _l_tail
   228 0000013B 488937                          mov [rdi], rsi
   229                                  
   230 0000013E EB4E                            jmp .last_step
   231                                  
   232                                          ; Change the head of the list to the second node.
   233                                          .change_list_head:
   234 00000140 498B3C24                        mov rdi, [r12]
   235 00000144 4C89E6                          mov rsi, r12
   236 00000147 4883C608                        add rsi, _l_tail
   237 0000014B 488B36                          mov rsi, [rsi]
   238 0000014E 4883C608                        add rsi, _n_next
   239 00000152 488B36                          mov rsi, [rsi]
   240 00000155 488937                          mov [rdi], rsi
   241                                  
   242 00000158 EB34                            jmp .last_step
   243                                  
   244                                          .node_neq_list_head:
   245 0000015A 498B3C24                        mov rdi, [r12]  ; the head node of the list
   246                                  
   247                                          ; Find the previous node of the target node.
   248                                          .find_node:
   249 0000015E 4883C708                        add rdi, _n_next
   250                                  
   251 00000162 4885FF                          test rdi, rdi
   252 00000165 7411                            jz   .after_finding  ; if the node is NULL, stop the loop.
   253                                  
   254 00000167 4889FE                          mov rsi, rdi
   255 0000016A 4883C608                        add rsi, _n_next
   256 0000016E 483B3E                          cmp rdi, [rsi]
   257 00000171 7405                            jz  .after_finding  ; if the next node of the node is target node,
   258                                                              ; stop the loop.
   259                                  
   260 00000173 488B3F                          mov rdi, [rdi]  ; Get the next node.
   261 00000176 EBE6                            jmp .find_node
   262                                  
   263                                          .after_finding:
   264 00000178 4885FF                          test rdi, rdi
   265 0000017B 7411                            jz   .last_step  ; if the node is NULL,
   266                                                           ; free target node immediately.
   267                                  
   268 0000017D 4883C708                        add rdi, _n_next
   269 00000181 4C89EE                          mov rsi, r13
   270 00000184 4883C608                        add rsi, _n_next
   271 00000188 488B36                          mov rsi, [rsi]
   272 0000018B 4C892F                          mov [rdi], r13
   273                                          
   274                                          .last_step:
   275 0000018E 4C89EF                          mov  rdi, r13
   276 00000191 E8(00000000)                    call free
   277                                  
   278 00000196 C9                              leave
   279 00000197 C3                              ret
   280                                  
