     1                                  %include "employee.asm"
     2                              <1> extern printf
     3                              <1> extern strcmp
     4                              <1> extern malloc
     5                              <1> extern strcpy
     6                              <1> 
     7                              <1> struc _employee
     8 00000000 <res 20h>           <1>     _e_name:  resb 32
     9 00000020 ??                  <1>     _e_age:   resb 1
    10                              <1> endstruc
    11                              <1> 
    12                              <1> global compare_employee
    13                              <1> compare_employee:
    14                              <1>     section .text 
    15 00000000 55                  <1>         push rbp
    16 00000001 4889E5              <1>         mov  rbp, rsp
    17                              <1> 
    18 00000004 488D3F              <1>         lea rdi, [rdi+_e_name]
    19 00000007 488D36              <1>         lea rsi, [rsi+_e_name]
    20 0000000A E8(00000000)        <1>         call strcmp
    21                              <1> 
    22 0000000F C9                  <1>         leave
    23 00000010 C3                  <1>         ret
    24                              <1>   
    25                              <1> ; * Args
    26                              <1> ;   * rdi: the address of name(string)
    27                              <1> ;   * rsi: age(unsigned integer)
    28                              <1> ; * Return: The address of the new employee
    29                              <1> global init_employee
    30                              <1> init_employee:
    31                              <1>     section .text
    32 00000011 55                  <1>         push rbp
    33 00000012 4889E5              <1>         mov  rbp, rsp
    34 00000015 4154                <1>         push r12
    35                              <1>     
    36 00000017 4989FA              <1>         mov  r10, rdi      ; the address of name
    37 0000001A 4989F3              <1>         mov  r11, rsi      ; age
    38                              <1>         
    39                              <1>         ; Allocate the memory from heap
    40 0000001D 4831FF              <1>         xor  rdi, rdi      ; rdi must be initialized!
    41 00000020 BF20000000          <1>         mov  rdi, _e_age  ; the size of _e_name
    42 00000025 4883C701            <1>         add  rdi, 1       ; the size of _e_age
    43 00000029 4152                <1>         push r10
    44 0000002B 4153                <1>         push r11
    45 0000002D E8(00000000)        <1>         call malloc
    46 00000032 415B                <1>         pop  r11
    47 00000034 415A                <1>         pop  r10
    48 00000036 4989C4              <1>         mov  r12, rax     ; Backup the address of employee
    49                              <1> 
    50                              <1>         ; Set name
    51 00000039 498D3C24            <1>         lea  rdi, [r12]
    52 0000003D 498D32              <1>         lea  rsi, [r10]
    53 00000040 4152                <1>         push r10
    54 00000042 4153                <1>         push r11
    55 00000044 4154                <1>         push r12          ; for stack alignment
    56 00000046 E8(00000000)        <1>         call strcpy
    57 0000004B 415C                <1>         pop  r12
    58 0000004D 415B                <1>         pop  r11
    59 0000004F 415A                <1>         pop  r10
    60                              <1> 
    61                              <1>         ; Set age
    62 00000051 498D3C24            <1>         lea  rdi, [r12]
    63 00000055 4883C720            <1>         add  rdi, _e_age
    64 00000059 4C891F              <1>         mov  [rdi], r11
    65 0000005C 4831FF              <1>         xor  rdi, rdi
    66 0000005F 4831F6              <1>         xor  rsi, rsi
    67                              <1> 
    68 00000062 4C89E0              <1>         mov  rax, r12
    69                              <1> 
    70 00000065 415C                <1>         pop r12
    71 00000067 C9                  <1>         leave
    72 00000068 C3                  <1>         ret
    73                              <1> 
    74                              <1> ; Print employee's info
    75                              <1> ; 
    76                              <1> ; * Args
    77                              <1> ;    * rdi: the address of employee
    78                              <1> display_employee:
    79                              <1>     section .data
    80 00000000 25730925640A00      <1>         .fmt  db  `%s\t%d\n`, 0
    81                              <1>     section .text
    82 00000069 55                  <1>         push rbp
    83 0000006A 4889E5              <1>         mov  rbp, rsp
    84                              <1> 
    85 0000006D 4989FA              <1>         mov  r10, rdi  ; the address of employee
    86                              <1> 
    87 00000070 48BF-               <1>         mov  rdi, .fmt
    87 00000072 [0000000000000000]  <1>
    88 0000007A 4C89D6              <1>         mov  rsi, r10     ; name
    89 0000007D 4C89D2              <1>         mov  rdx, r10 
    90 00000080 4883C220            <1>         add  rdx, _e_age  
    91 00000084 488B12              <1>         mov  rdx, [rdx]   ; age
    92 00000087 E8(00000000)        <1>         call printf
    93                              <1> 
    94 0000008C C9                  <1>         leave
    95 0000008D C3                  <1>         ret
    96                              <1> 
     2                                  %include "single_linked_list.asm"
     3                              <1> extern malloc
     4                              <1> 
     5                              <1> struc _node
     6 00000000 ????????????????    <1>     _n_data:  resq 1  ; the address of data of the node
     7 00000008 ????????????????    <1>     _n_next:  resq 1  ; the address of the next node
     8                              <1> endstruc
     9                              <1> 
    10                              <1> struc _linkedList
    11 00000000 ????????????????    <1>     _l_head:     resq 1  ; the address of the head node
    12 00000008 ????????????????    <1>     _l_tail:     resq 1  ; the address of the tail node
    13 00000010 ????????????????    <1>     _l_current:  resq 1  ; the address of the current node
    14                              <1> endstruc
    15                              <1> 
    16                              <1> ;
    17                              <1> ;
    18                              <1> ; * Args
    19                              <1> ;   * rdi: the address of a list
    20                              <1> global initialize_list
    21                              <1> initialize_list:
    22                              <1>     section .text
    23 0000008E 55                  <1>         push rbp
    24 0000008F 4889E5              <1>         mov  rbp, rsp
    25                              <1> 
    26 00000092 BF00000000          <1>         mov  rdi, 0          ; Set _l_head to NULL
    27 00000097 4883C708            <1>         add  rdi, _l_tail
    28 0000009B BF00000000          <1>         mov  rdi, 0          ; Set _l_tail to NULL
    29 000000A0 4883C710            <1>         add  rdi, _l_current
    30 000000A4 BF00000000          <1>         mov  rdi, 0          ; Set _l_current to NULL
    31                              <1> 
    32 000000A9 C9                  <1>         leave
    33 000000AA C3                  <1>         ret
    34                              <1> 
    35                              <1> ;
    36                              <1> ;
    37                              <1> ; * Args
    38                              <1> ;   * rdi: the address of a list
    39                              <1> ;   * rsi: the address of data
    40                              <1> global add_head
    41                              <1> add_head:
    42                              <1>     section .text
    43 000000AB 55                  <1>         push rbp
    44 000000AC 4889E5              <1>         mov  rbp, rsp
    45                              <1> 
    46 000000AF 4989FC              <1>         mov r12, rdi  ; the address of a list
    47 000000B2 4989F5              <1>         mov r13, rsi  ; the address of data
    48                              <1> 
    49                              <1>         ; Allocate memory for new node
    50 000000B5 4831FF              <1>         xor  rdi, rdi
    51 000000B8 BF00000000          <1>         mov  rdi, _n_data
    52 000000BD 4883C708            <1>         add  rdi, _n_next
    53 000000C1 4883C708            <1>         add  rdi, 8
    54 000000C5 E8(00000000)        <1>         call malloc
    55 000000CA 4989C6              <1>         mov  r14, rax         ; the address of new node
    56                              <1> 
    57                              <1>         ; Set the data of new node to
    58                              <1>         ; the address of data passed as an argument.
    59 000000CD 4C89E8              <1>         mov  rax, r13
    60                              <1> 
    61                              <1>         ; Check the head of the list
    62 000000D0 49F7C400000000      <1>         test r12, 0x0000000000000000
    63 000000D7 7518                <1>         jnz .yes_head
    64                              <1> 
    65                              <1>         ; If there is no head in the list, set the head to new node
    66                              <1>         ; and set the next of new node to NULL
    67                              <1>         .no_head:
    68 000000D9 4C89E7              <1>         mov  rdi, r12
    69 000000DC 4883C708            <1>         add  rdi, _l_tail
    70 000000E0 4C8937              <1>         mov  [rdi], r14
    71                              <1> 
    72 000000E3 4C89F7              <1>         mov  rdi, r14
    73 000000E6 4883C708            <1>         add  rdi, _n_next
    74 000000EA BF00000000          <1>         mov  rdi, 0        ; Is this okay?
    75                              <1> 
    76 000000EF EB0A                <1>         jmp .last_step
    77                              <1> 
    78                              <1>         ; If there is a head in the list,
    79                              <1>         ; set the next of new node to the head of the list.
    80                              <1>         .yes_head:
    81 000000F1 4C89F7              <1>         mov  rdi, r14
    82 000000F4 4883C708            <1>         add  rdi, _n_next
    83 000000F8 4C89E7              <1>         mov  rdi, r12 
    84                              <1> 
    85                              <1>         ; Set the head of the list
    86                              <1>         .last_step:
    87 000000FB 4D893424            <1>         mov [r12], r14
    88                              <1> 
    89 000000FF C9                  <1>         leave
    90 00000100 C3                  <1>         ret
    91                              <1> 
    92                              <1> 
    93                              <1> 
    94                              <1> 
    95                              <1> 
    96                              <1> 
    97                              <1> 
    98                              <1> 
    99                              <1>  
   100                              <1> 
     3                                  
     4                                  extern printf
     5                                  extern strcmp
     6                                  extern malloc
     7                                  extern strcpy
     8                                  
     9                                  section .data
    10 00000007 0000000000000000            samuel       dq  0
    11 0000000F 53616D75656C00              samuel_name  db  "Samuel", 0
    12 00000016 20                          samuel_age   db  32
    13 00000017 0000000000000000            sally        dq  0
    14 0000001F 53616C6C7900                sally_name   db  "Sally", 0
    15 00000025 1C                          sally_age    db  28
    16 00000026 0000000000000000            susan        dq  0
    17 0000002E 537573616E00                susan_name   db  "Susan", 0
    18 00000034 2D                          susan_age    db  45
    19 00000035 25730A00                    fmt_str  db  "%s", 10, 0
    20 00000039 25640A00                    fmt_int  db  "%d", 10, 0
    21                                  
    22                                  section .text
    23                                  
    24                                  global main
    25                                  main:
    26 00000101 55                          push rbp
    27 00000102 4889E5                      mov  rbp, rsp
    28                                  
    29                                  
    30 00000105 48BF-                       mov  rdi, samuel_name
    30 00000107 [0F00000000000000] 
    31 0000010F 4831F6                      xor  rsi, rsi
    32 00000112 408A3425[16000000]          mov  sil, [samuel_age]  ; sil is the lower 8 bits of rsi
    33 0000011A E8F2FEFFFF                  call init_employee
    34 0000011F 48890425[07000000]          mov  [samuel], rax
    35                                  
    36 00000127 48BF-                       mov  rdi, sally_name
    36 00000129 [1F00000000000000] 
    37 00000131 4831F6                      xor  rsi, rsi
    38 00000134 408A3425[25000000]          mov  sil, [sally_age]
    39 0000013C E8D0FEFFFF                  call init_employee
    40 00000141 48890425[17000000]          mov  [sally], rax
    41                                  
    42 00000149 48BF-                       mov  rdi, susan_name
    42 0000014B [2E00000000000000] 
    43 00000153 4831F6                      xor  rsi, rsi
    44 00000156 408A3425[34000000]          mov  sil, [susan_age]
    45 0000015E E8AEFEFFFF                  call init_employee
    46 00000163 48890425[26000000]          mov  [susan], rax
    47                                  
    48 0000016B 488B3C25[07000000]          mov  rdi, [samuel]
    49 00000173 E8F1FEFFFF                  call display_employee
    50                                  
    51 00000178 488B3C25[17000000]          mov  rdi, [sally]
    52 00000180 E8E4FEFFFF                  call display_employee
    53                                  
    54 00000185 488B3C25[26000000]          mov  rdi, [susan]
    55 0000018D E8D7FEFFFF                  call display_employee
    56                                  
    57 00000192 C9                          leave
    58 00000193 C3                          ret
    59                                  
    60                                  
